// TODO:
//   **** GENERATED BY JETBRAINS AI ASSISTANT. ****
//   **** DO NOT USE WITHOUT REVIEW, REVISION, AND REFINEMENT ****

use std::io::{Read, Write, Seek, SeekFrom};
use std::fs::OpenOptions;

pub struct Disk {
  file: std::fs::File,
  page_size: usize,
}

impl Disk {
  // Open the "disk" file with OpenOptions, so you can both read and write.
  pub fn new(path: &str, page_size: usize) -> std::io::Result<Disk> {
    let file = OpenOptions::new().read(true).write(true).open(path)?;
    Ok(Disk { file, page_size })
  }

  // To "read a page from disk", seek to the correct position in the file and read enough bytes.
  pub fn read_page(&mut self, page_number: usize, buffer: &mut [u8]) -> std::io::Result<()> {
    self.file.seek(SeekFrom::Start((page_number * self.page_size) as u64))?;
    self.file.read_exact(buffer)
  }

  // To "write a page to disk", seek to the correct position in the file and write the bytes.
  pub fn write_page(&mut self, page_number: usize, buffer: &[u8]) -> std::io::Result<()> {
    self.file.seek(SeekFrom::Start((page_number * self.page_size) as u64))?;
    self.file.write_all(buffer)
  }
}